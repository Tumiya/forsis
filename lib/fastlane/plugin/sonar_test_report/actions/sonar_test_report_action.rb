require 'fastlane/action'
require_relative '../helper/sonar_test_report_helper'

module Fastlane
  module Actions
    class SonarTestReportAction < Action

      
      def self.run(params) 
          junit_report_path = params[:junit_report_path]
          sonarqube_report_path = params[:sonar_report_path]
          Fastlane::Helper::SonarTestReport.generate(junit_report_path,sonar_report_path)
          UI.message("Generating the Sonarqube generic test execution report!")
        # end
      end

      def self.description
        "This plugin converts a junit test report to a sonarqube generic test execution report"
      end

      def self.authors
        ["Azadeh Bagheri"]
      end

      def self.return_value
        # If your method provides a return value, you can describe here what it does
      end

      def self.details
        # Optional:
        "This plugin uses junit test reports generated by fastlane and converts them into the sonarqube generic test execution reports"
      end

      def self.available_options
        [
          FastlaneCore::ConfigItem.new(
            key: :junit_report_path,
            env_name: "SONAR_TEST_REPORT_JUNIT_REPORT",
            description: "The path of the junit test report file used to generate the generic test execution file for sonarqube ",
            optional: false,
            type: String,
            display_in_shell: false,
            verify_block: proc do |path|
              # require 'pry'
              # binding.pry
               if path == ""
                UI.user_error!("'sonar_test_report' action missing the key 'junit_report_path' or its value.")
               else
                 UI.user_error!("ERROR: junit report not found at path: #{path}") unless File.exist?(path)
               end 
            end
            ),
            FastlaneCore::ConfigItem.new(
              key: :sonar_report_path,
              env_name: "SONAR_TEST_REPORT_SONAR_GENERATED_REPORT",
              description: "The path of the sonarqube test execution report generated from the junit test report",
              optional: true,
              default_value: 'Test_sonarqube_report.xml',
              type: String,
              verify_block: proc do |path|
                # return_directory(path) unless File.exist?(path)
              end
            )
        ]
      end

      def self.mandatory_options()
        compulsary_options = []
        available_options = available_options()
        available_options.each do |option|
          compulsary_options << option.key if option.optional == false
         end
         compulsary_options
      end

      # def self.return_directory(path)

      # end
      def self.is_supported?(platform)
        # Adjust this if your plugin only works for a particular platform (iOS vs. Android, for example)
        # See: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
        #
         [:ios, :mac].include?(platform)
        true
      end

    end
  end
end
